from smbus2 import SMBus
import time

class SSD1306:
    """Driver for SSD1306 OLED display."""
    
    def __init__(self, bus):
        """Initialize the SSD1306 OLED display."""
        self.bus = SMBus(bus)
        self.addr = 0x3C
        
        # Display settings
        self.width = 128
        self.height = 32
        self.pages = 4  # height/8
        
        # Init display
        self._init()
        # Init font
        self._init_font()
        
    def _init(self):
        """Minimal init sequence"""
        cmds = [
            0xAE,   # Display off
            0xA8,   # Set multiplex
            0x1F,   # for 32 height
            0xD3,   # Offset
            0x00,   # no offset
            0x40,   # Start line
            0xA1,   # Segment remap
            0xC8,   # COM scan direction
            0x8D,   # Charge pump
            0x14,   # Enable charge pump
            0xAF    # Display on
        ]
        
        for cmd in cmds:
            self._cmd(cmd)
        
        self.clear()
    
    def _cmd(self, cmd):
        """Send command byte"""
        self.bus.write_byte_data(self.addr, 0x00, cmd)
    
    def _data(self, data):
        """Send data byte"""
        self.bus.write_byte_data(self.addr, 0x40, data)
    
    def clear(self):
        """Clear the screen"""
        for page in range(self.pages):
            self._cmd(0xB0 + page)    # Set page
            self._cmd(0x00)           # Column low
            self._cmd(0x10)           # Column high
            for i in range(self.width):
                self._data(0x00)
    
    def fill_screen(self):
        """Fill screen with pattern"""
        for page in range(self.pages):
            self._cmd(0xB0 + page)    # Set page
            self._cmd(0x00)           # Column low
            self._cmd(0x10)           # Column high
            for i in range(self.width):
                self._data(0xFF)      # All pixels on
    
    def display_measurements(self, pressure, accel, temp, alt):
        """Display measurements on OLED."""
        # Format strings (16 chars per line)
        line1 = f"P:{pressure:6.1f} C:{accel:5.2f}"
        line2 = f"T:{temp:6.1f} A:{alt:5.0f}"
        
        self.clear()
        self._write_line(line1, 0)  # Write to pages 0-1
        self._write_line(line2, 2)  # Write to pages 2-3
    
    def _write_line(self, text, start_page):
        """Write a line of text starting at given page."""
        x = 0
        for char in text:
            if x >= self.width - 8:  # Stop at end of line
                break
            self._write_char(char, x, start_page)
            x += 8  # 8 pixels per character
    
    def _write_char(self, char, x, page):
        """Write a 8x16 character."""
        char_data = self._font.get(char, self._font['?'])
        
        # Write top half (page N)
        self._cmd(0xB0 + page)  # Set page
        self._cmd(0x02 + (x & 0x0F))  # Column low
        self._cmd(0x10 + (x >> 4))    # Column high
        for byte in char_data[:8]:     # First 8 bytes
            self._data(byte)
        
        # Write bottom half (page N+1)
        self._cmd(0xB0 + page + 1)
        self._cmd(0x02 + (x & 0x0F))
        self._cmd(0x10 + (x >> 4))
        for byte in char_data[8:]:     # Last 8 bytes
            self._data(byte)

    def _init_font(self):
        """Initialize 8x16 font data."""
        # Each character is 16 bytes (8x16 pixels)
        self._font = {
            ' ': [0x00]*16,
            '0': [0x3E,0x41,0x41,0x41,0x41,0x41,0x3E,0x00,
                  0x3E,0x41,0x41,0x41,0x41,0x41,0x3E,0x00],
            '1': [0x00,0x21,0x41,0x7F,0x01,0x01,0x00,0x00,
                  0x00,0x21,0x41,0x7F,0x01,0x01,0x00,0x00],
            '2': [0x00,0x23,0x45,0x49,0x49,0x31,0x00,0x00,
                  0x00,0x23,0x45,0x49,0x49,0x31,0x00,0x00],
            '3': [0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00,
                  0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00],
            '4': [0x0C,0x14,0x24,0x44,0x7F,0x04,0x00,0x00,
                  0x0C,0x14,0x24,0x44,0x7F,0x04,0x00,0x00],
            '5': [0x00,0x72,0x51,0x51,0x51,0x4E,0x00,0x00,
                  0x00,0x72,0x51,0x51,0x51,0x4E,0x00,0x00],
            '6': [0x00,0x3E,0x49,0x49,0x49,0x26,0x00,0x00,
                  0x00,0x3E,0x49,0x49,0x49,0x26,0x00,0x00],
            '7': [0x00,0x40,0x47,0x48,0x50,0x60,0x00,0x00,
                  0x00,0x40,0x47,0x48,0x50,0x60,0x00,0x00],
            '8': [0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00,
                  0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00],
            '9': [0x00,0x32,0x49,0x49,0x49,0x3E,0x00,0x00,
                  0x00,0x32,0x49,0x49,0x49,0x3E,0x00,0x00],
            '.': [0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00],
            ':': [0x00,0x00,0x00,0x36,0x36,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x36,0x36,0x00,0x00,0x00],
            'P': [0x00,0x7F,0x48,0x48,0x48,0x30,0x00,0x00,
                  0x00,0x7F,0x48,0x48,0x48,0x30,0x00,0x00],
            'T': [0x00,0x40,0x40,0x7F,0x40,0x40,0x00,0x00,
                  0x00,0x40,0x40,0x7F,0x40,0x40,0x00,0x00],
            'C': [0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00,
                  0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00],
            'A': [0x00,0x7F,0x48,0x48,0x48,0x7F,0x00,0x00,
                  0x00,0x7F,0x48,0x48,0x48,0x7F,0x00,0x00],
            '-': [0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00,
                  0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00],
            '?': [0x00,0x20,0x40,0x45,0x48,0x30,0x00,0x00,
                  0x00,0x20,0x40,0x45,0x48,0x30,0x00,0x00],
        }

    def show_init_message(self, message):
        """Show initialization message."""
        try:
            # Clear image
            self.clear()
            
            # Draw initialization message in the middle of the screen
            self.display_text(message, 2, 8)
            
        except Exception as e:
            print(f"Display error: {e}")
            time.sleep(0.1)

    def shutdown(self):
        """Turn off display"""
        self.clear()
        self._cmd(0xAE)
        self.bus.close()
